name: Build and Deploy to itch.io

on:
  push:
    branches:
      - main  # Adjust this if your main branch has a different name
    tags:
      - 'v*'  # Run when pushing version tags
  workflow_dispatch:  # Allow manual triggering

env:
  GODOT_VERSION: 4.4.1  # Latest stable Godot version
  EXPORT_NAME: MJ
  ITCH_USERNAME: ${{ vars.ITCH_USERNAME }}
  ITCH_GAME_NAME: ${{ vars.ITCH_GAME_NAME }}  # Your itch.io game name/URL path

jobs:
  export-web:
    name: Web Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y curl unzip

      - name: Setup Export Templates
        run: |
          # Download the templates
          mkdir -p /tmp/godot-templates
          curl -L -o /tmp/templates.tpz https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip /tmp/templates.tpz -d /tmp/godot-templates
          
          # Create the directory for v4.4 templates that the container expects
          mkdir -p ~/.local/share/godot/export_templates/4.4.stable
          cp -r /tmp/godot-templates/templates/* ~/.local/share/godot/export_templates/4.4.stable/
          
          # Show what we have for debugging
          echo "Contents of template directory:"
          ls -la ~/.local/share/godot/export_templates/4.4.stable/
          
          # Clean up
          rm -rf /tmp/templates.tpz /tmp/godot-templates
          
          # Create directory structure for build
          mkdir -p ~/.config/godot/
          mkdir -p ./build/web
          
      - name: Web Build
        run: |
          godot --version
          godot -v --headless --export-release "Web" ./build/web/index.html
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: web
          path: build/web
          
      - name: Deploy to itch.io
        uses: manleydev/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: html5
          ITCH_GAME: ${{ env.ITCH_GAME_NAME }}
          ITCH_USER: ${{ env.ITCH_USERNAME }}
          PACKAGE: build/web

  export-windows:
    name: Windows Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y curl unzip

      - name: Setup Export Templates
        run: |
          # Download the templates
          mkdir -p /tmp/godot-templates
          curl -L -o /tmp/templates.tpz https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip /tmp/templates.tpz -d /tmp/godot-templates
          
          # Create the directory for v4.4 templates that the container expects
          mkdir -p ~/.local/share/godot/export_templates/4.4.stable
          cp -r /tmp/godot-templates/templates/* ~/.local/share/godot/export_templates/4.4.stable/
          
          # Show what we have for debugging
          echo "Contents of template directory:"
          ls -la ~/.local/share/godot/export_templates/4.4.stable/
          
          # Clean up
          rm -rf /tmp/templates.tpz /tmp/godot-templates
          
          # Create directory structure for build
          mkdir -p ~/.config/godot/
          mkdir -p ./build/windows
          
      - name: Windows Build
        run: |
          godot -v --headless --export-release "Windows Desktop" ./build/windows/$EXPORT_NAME.exe
          
      - name: Zip Build
        run: |
          cd ./build/windows
          zip -r ../../$EXPORT_NAME-windows.zip .
          cd ../..
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: ${{ env.EXPORT_NAME }}-windows.zip
          
      - name: Deploy to itch.io
        uses: manleydev/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: windows
          ITCH_GAME: ${{ env.ITCH_GAME_NAME }}
          ITCH_USER: ${{ env.ITCH_USERNAME }}
          PACKAGE: ${{ env.EXPORT_NAME }}-windows.zip

  export-mac:
    name: macOS Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y curl unzip

      - name: Setup Export Templates
        run: |
          # Download the templates
          mkdir -p /tmp/godot-templates
          curl -L -o /tmp/templates.tpz https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip /tmp/templates.tpz -d /tmp/godot-templates
          
          # Create the directory for v4.4 templates that the container expects
          mkdir -p ~/.local/share/godot/export_templates/4.4.stable
          cp -r /tmp/godot-templates/templates/* ~/.local/share/godot/export_templates/4.4.stable/
          
          # Debug: Print all the files in template directory with clear labeling
          echo "==================== TEMPLATE FILES AVAILABLE ====================="
          cd ~/.local/share/godot/export_templates/4.4.stable/
          find . -type f | sort
          echo "=================================================================="
          
          # Try to identify and fix macOS templates
          FOUND_MAC=false
          # List of possible macOS template names
          for TEMPLATE in macos.* osx.* *.osx *.macos *.darwin darwin.* *.universal
          do
            if ls $TEMPLATE 1> /dev/null 2>&1; then
              echo "Found matching macOS template(s): $TEMPLATE"
              for file in $TEMPLATE; do
                echo "Creating symlink from $file to godot_macos_release.x86_64"
                cp "$file" godot_macos_release.x86_64
                FOUND_MAC=true
                # Break after first match
                break 2
              done
            fi
          done
          
          if [ "$FOUND_MAC" = false ]; then
            echo "No macOS templates found with expected names. Creating an empty placeholder for debugging."
            touch godot_macos_release.x86_64
            echo "Placeholder created, but export will likely fail. Check template names."
          fi
          
          # List files again to confirm changes
          echo "==================== TEMPLATES AFTER FIXES ======================="
          find . -type f | sort
          echo "=================================================================="
          cd -
          
          # Clean up
          rm -rf /tmp/templates.tpz /tmp/godot-templates
          
          # Create directory structure for build
          mkdir -p ~/.config/godot/
          mkdir -p ./build/mac
          
      - name: Mac Build
        run: |
          # Show export templates path for debugging
          echo "======= EXPORT TEMPLATES LOCATION ======="
          godot --version
          godot --path-info
          echo "======================================="
          
          # Try running with more verbose output
          godot -v --headless --export-release "macOS" ./build/mac/$EXPORT_NAME.zip || true
          
          # Even if export fails, create a placeholder file so artifact upload doesn't fail
          if [ ! -f "./build/mac/$EXPORT_NAME.zip" ]; then
            echo "Export failed, creating placeholder file"
            mkdir -p ./build/mac
            echo "Export failed, please check logs" > ./build/mac/export_failed.txt
          fi
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: mac
          path: build/mac
          
      - name: Deploy to itch.io
        if: success() && hashFiles('build/mac/MJ.zip') != ''
        uses: manleydev/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: mac
          ITCH_GAME: ${{ env.ITCH_GAME_NAME }}
          ITCH_USER: ${{ env.ITCH_USERNAME }}
          PACKAGE: build/mac/${{ env.EXPORT_NAME }}.zip

  export-linux:
    name: Linux Export
    runs-on: ubuntu-latest
    container:
      image: barichello/godot-ci:4.4
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: true

      - name: Install Dependencies
        run: |
          apt-get update
          apt-get install -y curl unzip

      - name: Setup Export Templates
        run: |
          # Download the templates
          mkdir -p /tmp/godot-templates
          curl -L -o /tmp/templates.tpz https://github.com/godotengine/godot/releases/download/${GODOT_VERSION}-stable/Godot_v${GODOT_VERSION}-stable_export_templates.tpz
          unzip /tmp/templates.tpz -d /tmp/godot-templates
          
          # Create the directory for v4.4 templates that the container expects
          mkdir -p ~/.local/share/godot/export_templates/4.4.stable
          cp -r /tmp/godot-templates/templates/* ~/.local/share/godot/export_templates/4.4.stable/
          
          # Show what we have for debugging
          echo "Contents of template directory:"
          ls -la ~/.local/share/godot/export_templates/4.4.stable/
          
          # Clean up
          rm -rf /tmp/templates.tpz /tmp/godot-templates
          
          # Create directory structure for build
          mkdir -p ~/.config/godot/
          mkdir -p ./build/linux
          
      - name: Linux Build
        run: |
          godot -v --headless --export-release "Linux/X11" ./build/linux/$EXPORT_NAME.x86_64
          
      - name: Create Archive
        run: |
          cd ./build/linux
          zip -r ../../$EXPORT_NAME-linux.zip .
          cd ../..
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: ${{ env.EXPORT_NAME }}-linux.zip
          
      - name: Deploy to itch.io
        uses: manleydev/butler-publish-itchio-action@master
        env:
          BUTLER_CREDENTIALS: ${{ secrets.BUTLER_API_KEY }}
          CHANNEL: linux
          ITCH_GAME: ${{ env.ITCH_GAME_NAME }}
          ITCH_USER: ${{ env.ITCH_USERNAME }}
          PACKAGE: ${{ env.EXPORT_NAME }}-linux.zip 